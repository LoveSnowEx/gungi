// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/LoveSnowEx/gungi/internal/infra/po"
)

func newGame(db *gorm.DB, opts ...gen.DOOption) game {
	_game := game{}

	_game.gameDo.UseDB(db, opts...)
	_game.gameDo.UseModel(&po.Game{})

	tableName := _game.gameDo.TableName()
	_game.ALL = field.NewAsterisk(tableName)
	_game.ID = field.NewUint(tableName, "id")
	_game.CreatedAt = field.NewTime(tableName, "created_at")
	_game.UpdatedAt = field.NewTime(tableName, "updated_at")
	_game.DeletedAt = field.NewField(tableName, "deleted_at")
	_game.CurrentTurn = field.NewUint(tableName, "current_turn")
	_game.Phase = field.NewUint(tableName, "phase")
	_game.Players = gameHasManyPlayers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Players", "po.Player"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Players.User", "po.User"),
		},
	}

	_game.BoardPieces = gameHasManyBoardPieces{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BoardPieces", "po.BoardPiece"),
	}

	_game.Reserve = gameHasManyReserve{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Reserve", "po.Piece"),
	}

	_game.Discard = gameHasManyDiscard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Discard", "po.Piece"),
	}

	_game.fillFieldMap()

	return _game
}

type game struct {
	gameDo gameDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CurrentTurn field.Uint
	Phase       field.Uint
	Players     gameHasManyPlayers

	BoardPieces gameHasManyBoardPieces

	Reserve gameHasManyReserve

	Discard gameHasManyDiscard

	fieldMap map[string]field.Expr
}

func (g game) Table(newTableName string) *game {
	g.gameDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g game) As(alias string) *game {
	g.gameDo.DO = *(g.gameDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *game) updateTableName(table string) *game {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.CurrentTurn = field.NewUint(table, "current_turn")
	g.Phase = field.NewUint(table, "phase")

	g.fillFieldMap()

	return g
}

func (g *game) WithContext(ctx context.Context) IGameDo { return g.gameDo.WithContext(ctx) }

func (g game) TableName() string { return g.gameDo.TableName() }

func (g game) Alias() string { return g.gameDo.Alias() }

func (g game) Columns(cols ...field.Expr) gen.Columns { return g.gameDo.Columns(cols...) }

func (g *game) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *game) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["current_turn"] = g.CurrentTurn
	g.fieldMap["phase"] = g.Phase

}

func (g game) clone(db *gorm.DB) game {
	g.gameDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g game) replaceDB(db *gorm.DB) game {
	g.gameDo.ReplaceDB(db)
	return g
}

type gameHasManyPlayers struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
}

func (a gameHasManyPlayers) Where(conds ...field.Expr) *gameHasManyPlayers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gameHasManyPlayers) WithContext(ctx context.Context) *gameHasManyPlayers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gameHasManyPlayers) Session(session *gorm.Session) *gameHasManyPlayers {
	a.db = a.db.Session(session)
	return &a
}

func (a gameHasManyPlayers) Model(m *po.Game) *gameHasManyPlayersTx {
	return &gameHasManyPlayersTx{a.db.Model(m).Association(a.Name())}
}

type gameHasManyPlayersTx struct{ tx *gorm.Association }

func (a gameHasManyPlayersTx) Find() (result []*po.Player, err error) {
	return result, a.tx.Find(&result)
}

func (a gameHasManyPlayersTx) Append(values ...*po.Player) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gameHasManyPlayersTx) Replace(values ...*po.Player) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gameHasManyPlayersTx) Delete(values ...*po.Player) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gameHasManyPlayersTx) Clear() error {
	return a.tx.Clear()
}

func (a gameHasManyPlayersTx) Count() int64 {
	return a.tx.Count()
}

type gameHasManyBoardPieces struct {
	db *gorm.DB

	field.RelationField
}

func (a gameHasManyBoardPieces) Where(conds ...field.Expr) *gameHasManyBoardPieces {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gameHasManyBoardPieces) WithContext(ctx context.Context) *gameHasManyBoardPieces {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gameHasManyBoardPieces) Session(session *gorm.Session) *gameHasManyBoardPieces {
	a.db = a.db.Session(session)
	return &a
}

func (a gameHasManyBoardPieces) Model(m *po.Game) *gameHasManyBoardPiecesTx {
	return &gameHasManyBoardPiecesTx{a.db.Model(m).Association(a.Name())}
}

type gameHasManyBoardPiecesTx struct{ tx *gorm.Association }

func (a gameHasManyBoardPiecesTx) Find() (result []*po.BoardPiece, err error) {
	return result, a.tx.Find(&result)
}

func (a gameHasManyBoardPiecesTx) Append(values ...*po.BoardPiece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gameHasManyBoardPiecesTx) Replace(values ...*po.BoardPiece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gameHasManyBoardPiecesTx) Delete(values ...*po.BoardPiece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gameHasManyBoardPiecesTx) Clear() error {
	return a.tx.Clear()
}

func (a gameHasManyBoardPiecesTx) Count() int64 {
	return a.tx.Count()
}

type gameHasManyReserve struct {
	db *gorm.DB

	field.RelationField
}

func (a gameHasManyReserve) Where(conds ...field.Expr) *gameHasManyReserve {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gameHasManyReserve) WithContext(ctx context.Context) *gameHasManyReserve {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gameHasManyReserve) Session(session *gorm.Session) *gameHasManyReserve {
	a.db = a.db.Session(session)
	return &a
}

func (a gameHasManyReserve) Model(m *po.Game) *gameHasManyReserveTx {
	return &gameHasManyReserveTx{a.db.Model(m).Association(a.Name())}
}

type gameHasManyReserveTx struct{ tx *gorm.Association }

func (a gameHasManyReserveTx) Find() (result []*po.Piece, err error) {
	return result, a.tx.Find(&result)
}

func (a gameHasManyReserveTx) Append(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gameHasManyReserveTx) Replace(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gameHasManyReserveTx) Delete(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gameHasManyReserveTx) Clear() error {
	return a.tx.Clear()
}

func (a gameHasManyReserveTx) Count() int64 {
	return a.tx.Count()
}

type gameHasManyDiscard struct {
	db *gorm.DB

	field.RelationField
}

func (a gameHasManyDiscard) Where(conds ...field.Expr) *gameHasManyDiscard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a gameHasManyDiscard) WithContext(ctx context.Context) *gameHasManyDiscard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a gameHasManyDiscard) Session(session *gorm.Session) *gameHasManyDiscard {
	a.db = a.db.Session(session)
	return &a
}

func (a gameHasManyDiscard) Model(m *po.Game) *gameHasManyDiscardTx {
	return &gameHasManyDiscardTx{a.db.Model(m).Association(a.Name())}
}

type gameHasManyDiscardTx struct{ tx *gorm.Association }

func (a gameHasManyDiscardTx) Find() (result []*po.Piece, err error) {
	return result, a.tx.Find(&result)
}

func (a gameHasManyDiscardTx) Append(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a gameHasManyDiscardTx) Replace(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a gameHasManyDiscardTx) Delete(values ...*po.Piece) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a gameHasManyDiscardTx) Clear() error {
	return a.tx.Clear()
}

func (a gameHasManyDiscardTx) Count() int64 {
	return a.tx.Count()
}

type gameDo struct{ gen.DO }

type IGameDo interface {
	gen.SubQuery
	Debug() IGameDo
	WithContext(ctx context.Context) IGameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameDo
	WriteDB() IGameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameDo
	Not(conds ...gen.Condition) IGameDo
	Or(conds ...gen.Condition) IGameDo
	Select(conds ...field.Expr) IGameDo
	Where(conds ...gen.Condition) IGameDo
	Order(conds ...field.Expr) IGameDo
	Distinct(cols ...field.Expr) IGameDo
	Omit(cols ...field.Expr) IGameDo
	Join(table schema.Tabler, on ...field.Expr) IGameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameDo
	Group(cols ...field.Expr) IGameDo
	Having(conds ...gen.Condition) IGameDo
	Limit(limit int) IGameDo
	Offset(offset int) IGameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameDo
	Unscoped() IGameDo
	Create(values ...*po.Game) error
	CreateInBatches(values []*po.Game, batchSize int) error
	Save(values ...*po.Game) error
	First() (*po.Game, error)
	Take() (*po.Game, error)
	Last() (*po.Game, error)
	Find() ([]*po.Game, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Game, err error)
	FindInBatches(result *[]*po.Game, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.Game) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameDo
	Assign(attrs ...field.AssignExpr) IGameDo
	Joins(fields ...field.RelationField) IGameDo
	Preload(fields ...field.RelationField) IGameDo
	FirstOrInit() (*po.Game, error)
	FirstOrCreate() (*po.Game, error)
	FindByPage(offset int, limit int) (result []*po.Game, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameDo) Debug() IGameDo {
	return g.withDO(g.DO.Debug())
}

func (g gameDo) WithContext(ctx context.Context) IGameDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameDo) ReadDB() IGameDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameDo) WriteDB() IGameDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameDo) Session(config *gorm.Session) IGameDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameDo) Clauses(conds ...clause.Expression) IGameDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameDo) Returning(value interface{}, columns ...string) IGameDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameDo) Not(conds ...gen.Condition) IGameDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameDo) Or(conds ...gen.Condition) IGameDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameDo) Select(conds ...field.Expr) IGameDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameDo) Where(conds ...gen.Condition) IGameDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameDo) Order(conds ...field.Expr) IGameDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameDo) Distinct(cols ...field.Expr) IGameDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameDo) Omit(cols ...field.Expr) IGameDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameDo) Join(table schema.Tabler, on ...field.Expr) IGameDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameDo) Group(cols ...field.Expr) IGameDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameDo) Having(conds ...gen.Condition) IGameDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameDo) Limit(limit int) IGameDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameDo) Offset(offset int) IGameDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameDo) Unscoped() IGameDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameDo) Create(values ...*po.Game) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameDo) CreateInBatches(values []*po.Game, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameDo) Save(values ...*po.Game) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameDo) First() (*po.Game, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.Game), nil
	}
}

func (g gameDo) Take() (*po.Game, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.Game), nil
	}
}

func (g gameDo) Last() (*po.Game, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.Game), nil
	}
}

func (g gameDo) Find() ([]*po.Game, error) {
	result, err := g.DO.Find()
	return result.([]*po.Game), err
}

func (g gameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Game, err error) {
	buf := make([]*po.Game, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameDo) FindInBatches(result *[]*po.Game, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameDo) Attrs(attrs ...field.AssignExpr) IGameDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameDo) Assign(attrs ...field.AssignExpr) IGameDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameDo) Joins(fields ...field.RelationField) IGameDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameDo) Preload(fields ...field.RelationField) IGameDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameDo) FirstOrInit() (*po.Game, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.Game), nil
	}
}

func (g gameDo) FirstOrCreate() (*po.Game, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.Game), nil
	}
}

func (g gameDo) FindByPage(offset int, limit int) (result []*po.Game, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameDo) Delete(models ...*po.Game) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameDo) withDO(do gen.Dao) *gameDo {
	g.DO = *do.(*gen.DO)
	return g
}
